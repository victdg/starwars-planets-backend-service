# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: zuvito
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: star-wars-with-berries-v1
# "service" is the name of this project. This will also be added to your AWS resource names.
service: starwars-planets-with-berries

provider:
  name: aws
  runtime: nodejs20.x
  region: ${self:custom.awsRegion}

  # Uncomment to easily set up a custom domain. Read the docs for more details:
  # https://www.serverless.com/framework/docs/providers/aws/guide/domains
  # domain: api.example.com

custom:
  cacheDynamoDBTable: "StarWarsCacheTable"
  historicalDynamoDBTable: "StarWarsHistoricalResponseTable"
  kingTable: "StarWarsKingTable"
  awsRegion: us-east-1

functions:
  getPlanets:
    handler: handler.getPlanets
    role: !GetAtt GetPlanetsLambdaRole.Arn
    timeout: 30
    events:
      - httpApi:
          path: /planet/{id}
          method: get
    environment:
      CACHE_TABLE_NAME: ${self:custom.cacheDynamoDBTable}
      HISTORICAL_TABLE_NAME: ${self:custom.historicalDynamoDBTable}
      REGION: ${self:custom.awsRegion}
  saveKing:
    handler: handler.saveKing
    role: !GetAtt GetPlanetsLambdaRole.Arn
    timeout: 30
    events:
      - httpApi:
          path: /king/{planetId}
          method: post
    environment:
      KING_TABLE_NAME: ${self:custom.kingTable}
      REGION: ${self:custom.awsRegion}

resources:
  Resources:
    StarWarsCacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.cacheDynamoDBTable}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - KeyType: HASH
            AttributeName: id
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    StarWarsHistoricalResponseTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.historicalDynamoDBTable}
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    kingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.kingTable}
        AttributeDefinitions:
          - AttributeName: planetId
            AttributeType: N
        KeySchema:
          - AttributeName: planetId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    GetPlanetsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetPlanetsLambdaRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                  Resource:
                    - arn:aws:dynamodb:*:*:table/${self:custom.cacheDynamoDBTable}
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - arn:aws:dynamodb:*:*:table/${self:custom.historicalDynamoDBTable}
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - arn:aws:dynamodb:*:*:table/${self:custom.kingTable}
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*
